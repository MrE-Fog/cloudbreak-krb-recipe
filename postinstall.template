#Pre
yum -y install ntp
ntpdate 0.rhel.pool.ntp.org
systemctl start  ntpd.service
systemctl enable ntpd.service

yum -y install krb5-workstation

tee /etc/krb5.conf <<EOF
[libdefaults]
  renew_lifetime = 7d
  forwardable = true
  udp_preference_limit = 1
  default_realm = {UDOMAIN}
  ticket_lifetime = 24h
  dns_lookup_realm = false
  dns_lookup_kdc = false
  default_ccache_name = /tmp/krb5cc_%{{uid}}
  default_tgs_enctypes = aes256-cts-hmac-sha1-96 arcfour-hmac
  default_tkt_enctypes = aes256-cts-hmac-sha1-96 arcfour-hmac

[domain_realm]
  {LDOMAIN} = {UDOMAIN}
  .{LDOMAIN} = {UDOMAIN}

[logging]
  default = FILE:/var/log/krb5kdc.log
  admin_server = FILE:/var/log/kadmind.log
  kdc = FILE:/var/log/krb5kdc.log

[realms]
  {UDOMAIN} = {{
    admin_server = {ADSERVER}
    kdc = {ADSERVER}
  }}

EOF
server=`cat /etc/ambari-agent/conf/ambari-agent.ini | grep hostname | cut -d '=' -f 2`
if [ {ADREALM} == "n" ] ; then
  sed -i "s/None/$server/g" /etc/krb5.conf
fi
if [ {ADREALM} == "n" ] && yum list installed | grep ambari-server; then
  yum -y install krb5-server krb5-libs
  tee /var/kerberos/krb5kdc/kdc.conf  <<EOF
  default_realm = {UDOMAIN}

[kdcdefaults]
    v4_mode = nopreauth
    kdc_ports = 0

[realms]
    {UDOMAIN} = {{
        kdc_ports = 88
        admin_keytab = /etc/kadm5.keytab
        database_name = /var/kerberos/krb5kdc/principal
        acl_file = /var/kerberos/krb5kdc/kadm5.acl
        key_stash_file = /var/kerberos/krb5kdc/stash
        max_life = 10h 0m 0s
        max_renewable_life = 7d 0h 0m 0s
        master_key_type = des3-hmac-sha1
        supported_enctypes = arcfour-hmac:normal des3-hmac-sha1:normal des-cbc-crc:normal des:normal des:v4 des:norealm des:onlyrealm des:afs3
        default_principal_flags = +preauth
    }}

EOF
  mkdir -p /etc/security/keytabs
  echo "*/admin@{UDOMAIN}	    *" > /var/kerberos/krb5kdc/kadm5.acl

  kdb5_util create -r {UDOMAIN} -s -P "{PASSWORD}"

  systemctl start krb5kdc.service
  systemctl start kadmin.service
  systemctl enable krb5kdc.service
  systemctl enable kadmin.service
  kadmin.local -q "addprinc -pw {PASSWORD} ambari/admin"
  kadmin.local -q "ktadd -norandkey -k /etc/security/keytabs/ambari.keytab ambari/admin"
fi

##AD Configs
if [ {ADREALM} == "y" ]; then
  yum -y install adcli sssd

  tee /etc/sssd/sssd.conf <<EOF

[sssd]
## master & data nodes only require nss. Edge nodes require pam.
services = nss, pam, ssh, autofs, pac
config_file_version = 2
domains = {UDOMAIN}
override_space = _

[domain/{UDOMAIN}]
id_provider = ad
ad_server = {ADSERVER}
auth_provider = ad
chpass_provider = ad
access_provider = ad
enumerate = False
ad_access_filter = {GROUPSFILTER}
krb5_realm = {UDOMAIN}
ldap_schema = ad
ldap_id_mapping = True
cache_credentials = True
ldap_access_order = expire
ldap_account_expire_policy = ad
ldap_force_upper_case_realm = true
fallback_homedir = /home/%u
default_shell = /bin/false
ldap_referrals = false

[nss]
memcache_timeout = 3600
override_shell = /bin/bash

EOF
chmod 600 /etc/sssd/sssd.conf
  echo -n "{PASSWORD}" | adcli join --stdin-password --domain-controller={ADSERVER} --domain-ou="{MACHINEOU}" --login-user="{ADUSER}@{UDOMAIN}"
  systemctl start sssd

  authconfig --enablesssd --enablesssdauth --update

fi
###############################################

if yum list installed | grep ambari-server; then
  export AMBARI_HOST=$(hostname -f)
  export CLUSTER_NAME=$(curl -u admin:admin -X GET http://$AMBARI_HOST:8080/api/v1/clusters |grep cluster_name|grep -Po ': "(.+)'|grep -Po '[a-zA-Z0-9\-_!?.]+')

  if [ {ADREALM} == "y" ]; then
    tee cert<<EOF
{CERT}
EOF

  keytool="$(cat /etc/ambari-server/conf/ambari.properties | grep java.home | cut -d '=' -f 2 )/bin/keytool"
  $keytool -importcert -keystore /etc/ambari-server/conf/truststore.jks -file cert -storepass "{PASSWORD}" -noprompt -alias LDAPCERT

  ambari-server setup-ldap --security-option=setup-ldap \
  --ldap-url="{ADSERVER}:636" \
  --ldap-ssl="true" \
  --ldap-user-class="person" \
  --ldap-user-attr="sAMAccountName" \
  --ldap-group-class="group" \
  --ldap-group-attr="cn" \
  --ldap-member-attr="member" \
  --ldap-dn="distunguishedName" \
  --ldap-base-dn="{BASEDN}" \
  --ldap-referral="" \
  --ldap-bind-anonym=false \
  --ldap-manager-dn="{ADUSER}@{UDOMAIN}" \
  --ldap-manager-password="{PASSWORD}" \
  --ldap-save-settings \
  --truststore-type="jks" \
  --truststore-path="/etc/ambari-server/conf/truststore.jks" \
  --truststore-password="{PASSWORD}" \
  --ldap-secondary-url=""
  --ldap-sync-username-collisions-behavior=convert

  ambari-server setup-security --security-option=setup-truststore --truststore-reconfigure --truststore-type=jks --truststore-path=/etc/ambari-server/conf/truststore.jks --truststore-password="{PASSWORD}"
  service ambari-server restart
  c
else
ambari-server setup-security --security-option=setup-kerberos-jaas --jaas-principal="{ADUSER}@{UDOMAIN}" --jaas-keytab="/etc/security/keytabs/ambari.keytab"
service ambari-server restart

fi
  curl -H "X-Requested-By:ambari" -u admin:admin -i -X POST http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/services/KERBEROS
  curl -H "X-Requested-By:ambari" -u admin:admin -i -X POST http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/services/KERBEROS/components/KERBEROS_CLIENT

  if [ {ADREALM} == "y" ]; then
    tee payload.json <<EOF
{{"properties": {{
  "domains":"",
  "manage_krb5_conf": "false",
  "conf_dir":"/etc"
}}}}
EOF
/var/lib/ambari-server/resources/scripts/configs.py -a set -l $AMBARI_HOST -n $CLUSTER_NAME -c krb5-conf -f payload.json
tee payload.json <<EOF
{{"properties": {{
  "kdc_type": "active-directory",
  "manage_identities": "true",
  "install_packages": "true",
  "encryption_types": "aes des3-cbc-sha1 rc4 des-cbc-md5",
  "realm" : "{UDOMAIN}",
  "kdc_hosts" : "{ADSERVER}",
  "admin_server_host" : "{ADSERVER}",
  "ldap_url" : "ldaps://{ADSERVER}:636",
  "container_dn" : "{CONTAINERDN}",
  "executable_search_paths" : "/usr/bin, /usr/kerberos/bin, /usr/sbin, /usr/lib/mit/bin, /usr/lib/mit/sbin",
  "password_length": "20",
  "password_min_lowercase_letters": "1",
  "password_min_uppercase_letters": "1",
  "password_min_digits": "1",
  "password_min_punctuation": "1",
  "password_min_whitespace": "0",
  "service_check_principal_name" : "${{cluster_name}}-${{short_date}}",
  "case_insensitive_username_rules" : "false",
  "create_attributes_template" :  "{{\n \"objectClass\": [\"top\", \"person\", \"organizationalPerson\", \"user\"],\n \"cn\": \"$principal_name\",\n #if( $is_service )\n \"servicePrincipalName\": \"$principal_name\",\n #end\n \"userPrincipalName\": \"$normalized_principal\",\n \"unicodePwd\": \"{{PASSWORD}}\",\n \"accountExpires\": \"0\",\n \"userAccountControl\": \"66048\"}}"
}}}}
EOF

  /var/lib/ambari-server/resources/scripts/configs.py -a set -l $AMBARI_HOST -n $CLUSTER_NAME -c kerberos-env -f payload.json
else
    USER="ambari/admin"
    tee payload.json <<EOF
{{"properties": {{
  "domains":"",
  "manage_krb5_conf": "false",
  "conf_dir":"/etc"
}}}}
EOF
  /var/lib/ambari-server/resources/scripts/configs.py -a set -l $AMBARI_HOST -n $CLUSTER_NAME -c krb5-conf -f payload.json
    tee payload.json <<EOF
{{"properties": {{
  "kdc_type": "mit-kdc",
  "manage_identities": "true",
  "install_packages": "true",
  "encryption_types": "aes des3-cbc-sha1 rc4 des-cbc-md5",
  "realm" : "{UDOMAIN}",
  "kdc_host" : "KDC_SERVER",
  "admin_server_host" : "KDC_SERVER",
  "executable_search_paths" : "/usr/bin, /usr/kerberos/bin, /usr/sbin, /usr/lib/mit/bin, /usr/lib/mit/sbin",
  "password_length": "20",
  "password_min_lowercase_letters": "1",
  "password_min_uppercase_letters": "1",
  "password_min_digits": "1",
  "password_min_punctuation": "1",
  "password_min_whitespace": "0",
  "service_check_principal_name" : "${{cluster_name}}-${{short_date}}",
  "case_insensitive_username_rules" : "false"
}}}}
EOF
  sed -i "s/KDC_SERVER/$AMBARI_HOST/g" payload.json
  /var/lib/ambari-server/resources/scripts/configs.py -a set -l $AMBARI_HOST -n $CLUSTER_NAME -c kerberos-env -f payload.json

fi

  curl -H "X-Requested-By:ambari" -u admin:admin -i -X POST -d '{{"host_components" : [{{"HostRoles" : {{"component_name":"KERBEROS_CLIENT"}}}}]}}' http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/hosts?Hosts/host_name=$AMBARI_HOST
  sleep 5

  curl -H "X-Requested-By:ambari" -u admin:admin -i -X PUT -d '{{"ServiceInfo": {{"state" : "INSTALLED"}}}}' http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/services/KERBEROS
  sleep 5
  TASKID=$(curl -H "X-Requested-By:ambari" -u admin:admin -i -X PUT -d  '{{"RequestInfo":{{"context":"Stop Service"}},"Body":{{"ServiceInfo":{{"state":"INSTALLED"}}}}}}' http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/services | grep "id" | grep -Po '([0-9]+)')
  LOOPESCAPE="false"
  until [ "$LOOPESCAPE" == true ]; do
      TASKSTATUS=$(curl -s -u admin:admin -X GET http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/requests/$TASKID | grep "request_status" | grep -Po '([A-Z]+)')
      if [ "$TASKSTATUS" == COMPLETED ]; then
          LOOPESCAPE="true"
      fi
      echo Stopping Cluster
      sleep 2
  done


  tee payload.json <<EOF

  {{
    "session_attributes" : {{
      "kerberos_admin" : {{
        "principal" : "{ADUSER}@{UDOMAIN}",
        "password" : "{PASSWORD}"
      }}
    }},
    "Clusters": {{
      "security_type" : "KERBEROS"
    }}
  }}
EOF



  TASKID=$(curl -H "X-Requested-By:ambari" -u admin:admin -i -X PUT -d @./payload.json http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME | grep "id" | grep -Po '([0-9]+)')
  LOOPESCAPE="false"
  until [ "$LOOPESCAPE" == true ]; do
      TASKSTATUS=$(curl -s -u admin:admin -X GET http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/requests/$TASKID | grep "request_status" | grep -Po '([A-Z]+)')
      if [ "$TASKSTATUS" == COMPLETED ]; then
          LOOPESCAPE="true"
      fi
      echo Enbaling krb5
      sleep 2
  done

  curl -H "X-Requested-By:ambari" -u admin:admin -i -X PUT -d '{{"ServiceInfo": {{"state" : "STARTED"}}}}' http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/services
  echo Starting Cluster
fi
