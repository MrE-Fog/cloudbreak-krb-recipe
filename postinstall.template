if yum list installed | grep ambari-server; then
  export AMBARI_HOST=$(hostname -f)
  export CLUSTER_NAME=$(curl -u {ambariuser}:{ambaripassword} -X GET http://$AMBARI_HOST:8080/api/v1/clusters |grep cluster_name|grep -Po ': "(.+)'|grep -Po '[a-zA-Z0-9\-_!?.]+')

  curl -H "X-Requested-By:ambari" -u {ambariuser}:{ambaripassword} -i -X POST http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/services/KERBEROS
  curl -H "X-Requested-By:ambari" -u {ambariuser}:{ambaripassword} -i -X POST http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/services/KERBEROS/components/KERBEROS_CLIENT

  if [ {ADREALM} == "y" ]; then
    tee payload.json <<EOF
"properties": {{
  "domains":"",
  "manage_krb5_conf": "false",
  "conf_dir":"/etc"
}}
EOF
/var/lib/ambari-server/resources/scripts/configs.py -a set -l $AMBARI_HOST -n $CLUSTER_NAME -c krb5-conf -f payload.json
tee payload.json <<EOF
"properties": {{
  "kdc_type": "active-directory",
  "manage_identities": "true",
  "install_packages": "true",
  "encryption_types": "aes des3-cbc-sha1 rc4 des-cbc-md5",
  "realm" : "{UDOMAIN}",
  "kdc_hosts" : "{ADSERVER}",
  "admin_server_host" : "{ADSERVER}",
  "ldap_url" : "ldaps://{ADSERVER}:636",
  "container_dn" : "{CONTAINERDN}",
  "executable_search_paths" : "/usr/bin, /usr/kerberos/bin, /usr/sbin, /usr/lib/mit/bin, /usr/lib/mit/sbin",
  "password_length": "20",
  "password_min_lowercase_letters": "1",
  "password_min_uppercase_letters": "1",
  "password_min_digits": "1",
  "password_min_punctuation": "1",
  "password_min_whitespace": "0",
  "service_check_principal_name" : "${{cluster_name}}-${{short_date}}",
  "case_insensitive_username_rules" : "false",
  "create_attributes_template" :  "{{\n \"objectClass\": [\"top\", \"person\", \"organizationalPerson\", \"user\"],\n \"cn\": \"$principal_name\",\n #if( $is_service )\n \"servicePrincipalName\": \"$principal_name\",\n #end\n \"userPrincipalName\": \"$normalized_principal\",\n \"unicodePwd\": \"{{PASSWORD}}\",\n \"accountExpires\": \"0\",\n \"userAccountControl\": \"66048\"}}"
}}
EOF

  /var/lib/ambari-server/resources/scripts/configs.py -a set -l $AMBARI_HOST -n $CLUSTER_NAME -c kerberos-env -f payload.json
else
    USER="ambari/admin"
    tee payload.json <<EOF
"properties": {{
  "domains":"",
  "manage_krb5_conf": "false",
  "conf_dir":"/etc"
}}
EOF
  /var/lib/ambari-server/resources/scripts/configs.py -a set -l $AMBARI_HOST -n $CLUSTER_NAME -c krb5-conf -f payload.json
    tee payload.json <<EOF
"properties": {{
  "kdc_type": "mit-kdc",
  "manage_identities": "true",
  "install_packages": "true",
  "encryption_types": "aes des3-cbc-sha1 rc4 des-cbc-md5",
  "realm" : "{UDOMAIN}",
  "kdc_host" : "KDC_SERVER",
  "admin_server_host" : "KDC_SERVER",
  "executable_search_paths" : "/usr/bin, /usr/kerberos/bin, /usr/sbin, /usr/lib/mit/bin, /usr/lib/mit/sbin",
  "password_length": "20",
  "password_min_lowercase_letters": "1",
  "password_min_uppercase_letters": "1",
  "password_min_digits": "1",
  "password_min_punctuation": "1",
  "password_min_whitespace": "0",
  "service_check_principal_name" : "${{cluster_name}}-${{short_date}}",
  "case_insensitive_username_rules" : "false"
}}
EOF
if [ {KDCEXISTS} == "n" ]; then
  sed -i "s/KDC_SERVER/$AMBARI_HOST/g" payload.json
else
  sed -i "s/KDC_SERVER/{KDC}/g" payload.json
fi
  /var/lib/ambari-server/resources/scripts/configs.py -a set -l $AMBARI_HOST -n $CLUSTER_NAME -c kerberos-env -f payload.json

fi

hosts=`curl -s -k -u {ambariuser}:{ambaripassword} http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/hosts | grep host_name | cut -d : -f 2 | sed 's/"//g' | sed 's/ //g'`
for host in $hosts; do
  curl -H "X-Requested-By:ambari" -u {ambariuser}:{ambaripassword} -i -X POST -d '{{"host_components" : [{{"HostRoles" : {{"component_name":"KERBEROS_CLIENT"}}}}]}}' http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/hosts?Hosts/host_name=$host
  sleep 5
done

  curl -H "X-Requested-By:ambari" -u {ambariuser}:{ambaripassword} -i -X PUT -d '{{"ServiceInfo": {{"state" : "INSTALLED"}}}}' http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/services/KERBEROS
  sleep 5
  TASKID=$(curl -H "X-Requested-By:ambari" -u {ambariuser}:{ambaripassword} -i -X PUT -d  '{{"RequestInfo":{{"context":"Stop Service"}},"Body":{{"ServiceInfo":{{"state":"INSTALLED"}}}}}}' http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/services | grep '"id" :' | cut -d : -f 2 | cut -d , -f 1 | sed 's/ //g')
  LOOPESCAPE="false"
  until [ "$LOOPESCAPE" == true ]; do
      TASKSTATUS=$(curl -s -u {ambariuser}:{ambaripassword} -X GET http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/requests/$TASKID | grep "request_status" | grep -Po '([A-Z]+)')
      if [ "$TASKSTATUS" == COMPLETED ]; then
          LOOPESCAPE="true"
      fi
      echo Stopping Cluster
      sleep 2
  done


  tee payload.json <<EOF
{{
    "session_attributes" : {{
      "kerberos_admin" : {{
        "principal" : "{ADUSER}@{UDOMAIN}",
        "password" : "{PASSWORD}"
      }}
    }},
    "Clusters": {{
      "security_type" : "KERBEROS"
    }}
}}
EOF



  TASKID=$(curl -H "X-Requested-By:ambari" -u {ambariuser}:{ambaripassword} -i -X PUT -d @./payload.json http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME | grep "id" | grep -Po '([0-9]+)')
  LOOPESCAPE="false"
  until [ "$LOOPESCAPE" == true ]; do
      TASKSTATUS=$(curl -s -u {ambariuser}:{ambaripassword} -X GET http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/requests/$TASKID | grep "request_status" | grep -Po '([A-Z]+)')
      if [ "$TASKSTATUS" == COMPLETED ]; then
          LOOPESCAPE="true"
      fi
      echo Enbaling krb5
      sleep 2
  done

  TASKID=$(curl -H "X-Requested-By:ambari" -u {ambariuser}:{ambaripassword} -i -X PUT -d '{{"ServiceInfo": {{"state" : "STARTED"}}}}' http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/services | grep '"id" :' | cut -d : -f 2 | cut -d , -f 1 | sed 's/ //g')
  LOOPESCAPE="false"
  until [ "$LOOPESCAPE" == true ]; do
      TASKSTATUS=$(curl -s -u {ambariuser}:{ambaripassword} -X GET http://$AMBARI_HOST:8080/api/v1/clusters/$CLUSTER_NAME/requests/$TASKID | grep "request_status" | grep -Po '([A-Z]+)')
      if [ "$TASKSTATUS" == COMPLETED ]; then
          LOOPESCAPE="true"
      fi
      echo Starting Cluster
      sleep 2
  done
fi


if [ {ADREALM} == "y" ]; then
  tee cert<<EOF
{CERT}
EOF

keytool="$(cat /etc/ambari-server/conf/ambari.properties | grep java.home | cut -d '=' -f 2 )/bin/keytool"
$keytool -importcert -keystore /etc/ambari-server/conf/truststore.jks -file cert -storepass "{PASSWORD}" -noprompt -alias LDAPCERT

ambari-server setup-ldap --security-option=setup-ldap \
--ldap-url="{ADSERVER}:636" \
--ldap-ssl="true" \
--ldap-user-class="person" \
--ldap-user-attr="sAMAccountName" \
--ldap-group-class="group" \
--ldap-group-attr="cn" \
--ldap-member-attr="member" \
--ldap-dn="distunguishedName" \
--ldap-base-dn="{BASEDN}" \
--ldap-referral="" \
--ldap-bind-anonym=false \
--ldap-manager-dn="{ADUSER}@{UDOMAIN}" \
--ldap-manager-password="{PASSWORD}" \
--ldap-save-settings \
--truststore-type="jks" \
--truststore-path="/etc/ambari-server/conf/truststore.jks" \
--truststore-password="{PASSWORD}" \
--ldap-secondary-url=""
--ldap-sync-username-collisions-behavior=convert

ambari-server setup-security --security-option=setup-truststore --truststore-reconfigure --truststore-type=jks --truststore-path=/etc/ambari-server/conf/truststore.jks --truststore-password="{PASSWORD}"
service ambari-server restart
else
ambari-server setup-security --security-option=setup-kerberos-jaas --jaas-principal="{ADUSER}@{UDOMAIN}" --jaas-keytab="/etc/security/keytabs/ambari.keytab"
service ambari-server restart

fi
